---

- name: Setting up VMs ...
  hosts: ubuntu
  connection: local
  gather_facts: no     
  become: true
  become_user: root
  become_method: sudo
  
  roles:
          - java  # Java setup, see java/tasks/main.yml

  vars_files:
          - config.yml
  tasks:
  - name: Accessing variables in inventory file
    debug:
            msg: "Setting up the following host: {{ ansible_host }}"

  - name: Get the links correct
    file:
        src: "{{ dot_dir }}/{{ item }}"
        dest: "{{ user_home_dir }}/.{{ item }}"
        state: link
    with_items: "{{ link_files }}"

  - name: Python3.7 PPA 
    apt_repository:
      validate_certs: no
      repo: 'ppa:deadsnakes/ppa'
      state: present

  - name: Install all apt-packages
    apt: name={{item}} state=present
    with_items: "{{ apt_packages }}"
    
  - name: Add folders to autojump
    become_user: "{{ username }}"
    command: "autojump --add {{ item }}"
    with_items: "{{ course_folders }}"

  - name: Downloading Python3 sources
    get_url:
      url: "{{ python3_url }}"
      dest: "/tmp/Python-{{ python3_version }}.tar.gz"
    register: python3_source
    when: install_py37_source == true

  - name: Unpacking Python3
    unarchive:
      copy: no
      src: "{{ python3_source.dest }}"
      dest: /tmp/
    when: python3_source.changed and install_py37_source == true
    register: python3_source_unpack 

  - name: Configuring Python3 source with custom modules
    # command: "./configure --enable-optimizations --with-tcltk-includes='-I/usr/include' --with-tcltk-libs='-L/usr/lib64 -ltcl8.6 -L/usr/lib64 -ltk8.6'"
    command: "./configure --enable-optimizations"
    args:
      chdir: "{{ python3_install_dir }}"
    when: python3_source_unpack is changed and install_py37_source == true
    register: python3_configure 

  - name: Installing Python3
    become: yes
    shell: make && make install
    args:
      chdir: "{{ python3_install_dir }}"
    when: python3_configure is changed and install_py37_source == true

  - name: creating new virtualenv envs
    # shell: "virtualenv -p {{ item.interpreter }} {{ item.name }}"
    command: "virtualenv {{ virtualenv_dir}}/{{ item.name  }} -p {{item.interpreter}} creates={{ virtualenv_dir }}/{{ item.name }}"
    args:
      chdir: "{{ virtualenv_dir }}/"
    with_items: "{{ virtualenvs }}"
    become_user: "{{ username }}"

  - name: installing pip packages
    pip: 
      # requirements: "/{{ project_name }}/ {{ project_requirements }}"
      requirements: "{{ user_home_dir }}/{{ setup_dir }}/{{ item.rfile }}"
      virtualenv: "{{ virtualenv_dir }}/{{ item.name }}"
      virtualenv_python: "{{ item.interpreter }}"
    with_items: "{{ virtualenvs }}"
    become_user: "{{ username }}"

